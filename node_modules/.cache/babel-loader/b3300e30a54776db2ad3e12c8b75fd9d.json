{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from \"react\";\n\nconst useWatchLocation = function () {\n  _s();\n\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  console.log(\"started\"); // store location in state\n\n  const [location, setLocation] = useState(); // store error message in state\n\n  const [error, setError] = useState(); // save the returned id from the geolocation's `watchPosition` to be able to cancel the watch instance\n\n  const locationWatchId = useRef(null); // Success handler for geolocation's `watchPosition` method\n\n  const handleSuccess = pos => {\n    const {\n      latitude,\n      longitude\n    } = pos.coords;\n    setLocation({\n      latitude,\n      longitude\n    });\n  }; // Error handler for geolocation's `watchPosition` method\n\n\n  const handleError = error => {\n    setError(error.message);\n  }; // Clears the watch instance based on the saved watch id\n\n\n  const cancelLocationWatch = () => {\n    const {\n      geolocation\n    } = navigator;\n\n    if (locationWatchId.current && geolocation) {\n      geolocation.clearWatch(locationWatchId.current);\n    }\n  };\n\n  useEffect(() => {\n    const {\n      geolocation\n    } = navigator; // If the geolocation is not defined in the used browser we handle it as an error\n\n    if (!geolocation) {\n      setError(\"Geolocation is not supported.\");\n      return;\n    } // Start to watch the location with the Geolocation API\n\n\n    locationWatchId.current = geolocation.watchPosition(handleSuccess, handleError, options); // Clear the location watch instance when React unmounts the used component\n\n    return cancelLocationWatch;\n  }, [options]);\n  return {\n    location,\n    cancelLocationWatch,\n    error\n  };\n};\n\n_s(useWatchLocation, \"hO8JMDC1gGPZhHqEBND7aqJGxvs=\");\n\nexport default useWatchLocation;","map":{"version":3,"names":["useState","useEffect","useRef","useWatchLocation","options","console","log","location","setLocation","error","setError","locationWatchId","handleSuccess","pos","latitude","longitude","coords","handleError","message","cancelLocationWatch","geolocation","navigator","current","clearWatch","watchPosition"],"sources":["/Users/bibeon0000/nabe/src/userWatch.js"],"sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nconst useWatchLocation = (options = {}) => {\n    console.log(\"started\")\n  // store location in state\n  const [location, setLocation] = useState();\n  // store error message in state\n  const [error, setError] = useState();\n  // save the returned id from the geolocation's `watchPosition` to be able to cancel the watch instance\n  const locationWatchId = useRef(null);\n  // Success handler for geolocation's `watchPosition` method\n  const handleSuccess = (pos) => {\n    const { latitude, longitude } = pos.coords;\n    setLocation({\n      latitude,\n      longitude,\n    });\n  };\n  // Error handler for geolocation's `watchPosition` method\n  const handleError = (error) => {\n    setError(error.message);\n  };\n  // Clears the watch instance based on the saved watch id\n  const cancelLocationWatch = () => {\n    const { geolocation } = navigator;\n    if (locationWatchId.current && geolocation) {\n      geolocation.clearWatch(locationWatchId.current);\n    }\n  };\n  useEffect(() => {\n    const { geolocation } = navigator;\n    // If the geolocation is not defined in the used browser we handle it as an error\n    if (!geolocation) {\n      setError(\"Geolocation is not supported.\");\n      return;\n    }\n    // Start to watch the location with the Geolocation API\n    locationWatchId.current = geolocation.watchPosition(handleSuccess, handleError, options);\n    // Clear the location watch instance when React unmounts the used component\n    return cancelLocationWatch;\n  }, [options]);\n  return { location, cancelLocationWatch, error };\n};\nexport default useWatchLocation;"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;;AACA,MAAMC,gBAAgB,GAAG,YAAkB;EAAA;;EAAA,IAAjBC,OAAiB,uEAAP,EAAO;EACvCC,OAAO,CAACC,GAAR,CAAY,SAAZ,EADuC,CAEzC;;EACA,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,EAAxC,CAHyC,CAIzC;;EACA,MAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,EAAlC,CALyC,CAMzC;;EACA,MAAMW,eAAe,GAAGT,MAAM,CAAC,IAAD,CAA9B,CAPyC,CAQzC;;EACA,MAAMU,aAAa,GAAIC,GAAD,IAAS;IAC7B,MAAM;MAAEC,QAAF;MAAYC;IAAZ,IAA0BF,GAAG,CAACG,MAApC;IACAR,WAAW,CAAC;MACVM,QADU;MAEVC;IAFU,CAAD,CAAX;EAID,CAND,CATyC,CAgBzC;;;EACA,MAAME,WAAW,GAAIR,KAAD,IAAW;IAC7BC,QAAQ,CAACD,KAAK,CAACS,OAAP,CAAR;EACD,CAFD,CAjByC,CAoBzC;;;EACA,MAAMC,mBAAmB,GAAG,MAAM;IAChC,MAAM;MAAEC;IAAF,IAAkBC,SAAxB;;IACA,IAAIV,eAAe,CAACW,OAAhB,IAA2BF,WAA/B,EAA4C;MAC1CA,WAAW,CAACG,UAAZ,CAAuBZ,eAAe,CAACW,OAAvC;IACD;EACF,CALD;;EAMArB,SAAS,CAAC,MAAM;IACd,MAAM;MAAEmB;IAAF,IAAkBC,SAAxB,CADc,CAEd;;IACA,IAAI,CAACD,WAAL,EAAkB;MAChBV,QAAQ,CAAC,+BAAD,CAAR;MACA;IACD,CANa,CAOd;;;IACAC,eAAe,CAACW,OAAhB,GAA0BF,WAAW,CAACI,aAAZ,CAA0BZ,aAA1B,EAAyCK,WAAzC,EAAsDb,OAAtD,CAA1B,CARc,CASd;;IACA,OAAOe,mBAAP;EACD,CAXQ,EAWN,CAACf,OAAD,CAXM,CAAT;EAYA,OAAO;IAAEG,QAAF;IAAYY,mBAAZ;IAAiCV;EAAjC,CAAP;AACD,CAxCD;;GAAMN,gB;;AAyCN,eAAeA,gBAAf"},"metadata":{},"sourceType":"module"}